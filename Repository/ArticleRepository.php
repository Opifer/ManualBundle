<?php

namespace Opifer\ManualBundle\Repository;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Parameter;

/**
 * HelpRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    /**
     * Gets an article by a slug
     *
     * @param $slug
     *
     * @return \Doctrine\ORM\Query returns the result from the query.
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    function getSingleArticleBySlug($slug)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a, c')
            ->leftJoin('a.category', 'c')
            ->where('a.slug = :slug')
            ->setParameter('slug', $slug);

        return $qb->getQuery()->getSingleResult();
    }

    /**
     * Gets all the articles by a search_query
     *
     * @param string $search_query the string the user inputs into search box
     *
     * @return array result of query.
     */
    function getSearchedArticles($search_query)
    {
        $query = $this->createQueryBuilder('a')
            ->where('a.title LIKE :title')
            ->setParameter('title', '%'.$search_query.'%');

            return $query->getQuery()->getArrayResult();
    }

    /**
     * Gets all articles
     *
     * @return array
     */
    function getAllArticles()
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a, c')
            ->leftJoin('a.category', 'c');

        return $qb->getQuery()->getResult();
    }

    /**
     * Gets all articles for a specific category
     *
     * @param $category_id
     *
     * @return array
     */
    function getArticlesForCategory($category_id)
    {
        $qb = $this->createQueryBuilder('a')
            ->select('a')
            ->where('a.category = :category_id')
            ->setParameter('category_id', $category_id);

        return $qb->getQuery()->getResult();
    }

}
